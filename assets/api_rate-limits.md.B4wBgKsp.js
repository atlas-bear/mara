import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.BONmpqY0.js";const g=JSON.parse('{"title":"API Rate Limits","description":"","frontmatter":{},"headers":[],"relativePath":"api/rate-limits.md","filePath":"api/rate-limits.md"}'),n={name:"api/rate-limits.md"};function l(h,s,r,p,k,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="api-rate-limits" tabindex="-1">API Rate Limits <a class="header-anchor" href="#api-rate-limits" aria-label="Permalink to &quot;API Rate Limits&quot;">​</a></h1><p>To ensure service stability and fair usage, the MARA API enforces rate limits on requests. This page explains how these limits work, how to track your usage, and what to do when you reach a limit.</p><h2 id="rate-limit-tiers" tabindex="-1">Rate Limit Tiers <a class="header-anchor" href="#rate-limit-tiers" aria-label="Permalink to &quot;Rate Limit Tiers&quot;">​</a></h2><p>Rate limits are based on your subscription tier:</p><table tabindex="0"><thead><tr><th>Tier</th><th>Requests per Minute</th><th>Requests per Day</th><th>Burst Capacity</th></tr></thead><tbody><tr><td>Basic</td><td>30</td><td>2,000</td><td>50</td></tr><tr><td>Standard</td><td>60</td><td>5,000</td><td>100</td></tr><tr><td>Premium</td><td>120</td><td>10,000</td><td>200</td></tr><tr><td>Enterprise</td><td>Custom</td><td>Custom</td><td>Custom</td></tr></tbody></table><ul><li><strong>Requests per Minute</strong>: The maximum number of requests allowed in any 60-second window</li><li><strong>Requests per Day</strong>: The maximum number of requests allowed in a 24-hour period (UTC)</li><li><strong>Burst Capacity</strong>: The maximum number of requests allowed in a short burst (typically 10 seconds)</li></ul><h2 id="rate-limit-headers" tabindex="-1">Rate Limit Headers <a class="header-anchor" href="#rate-limit-headers" aria-label="Permalink to &quot;Rate Limit Headers&quot;">​</a></h2><p>Every API response includes headers that provide information about your current rate limit status:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>X-RateLimit-Limit: 60</span></span>
<span class="line"><span>X-RateLimit-Remaining: 45</span></span>
<span class="line"><span>X-RateLimit-Reset: 1632506892</span></span>
<span class="line"><span>X-Daily-RateLimit-Limit: 5000</span></span>
<span class="line"><span>X-Daily-RateLimit-Remaining: 4320</span></span>
<span class="line"><span>X-Daily-RateLimit-Reset: 1632571200</span></span></code></pre></div><ul><li><strong>X-RateLimit-Limit</strong>: Your per-minute request limit</li><li><strong>X-RateLimit-Remaining</strong>: The number of requests remaining in the current minute window</li><li><strong>X-RateLimit-Reset</strong>: The time at which the per-minute limit resets (Unix timestamp)</li><li><strong>X-Daily-RateLimit-Limit</strong>: Your daily request limit</li><li><strong>X-Daily-RateLimit-Remaining</strong>: The number of requests remaining in the current day</li><li><strong>X-Daily-RateLimit-Reset</strong>: The time at which the daily limit resets (Unix timestamp)</li></ul><h2 id="handling-rate-limit-errors" tabindex="-1">Handling Rate Limit Errors <a class="header-anchor" href="#handling-rate-limit-errors" aria-label="Permalink to &quot;Handling Rate Limit Errors&quot;">​</a></h2><p>When you exceed a rate limit, the API returns a <code>429 Too Many Requests</code> response with details about the limit exceeded:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rate_limit_exceeded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You have exceeded the rate limit of 60 requests per minute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;details&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;remaining&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;reset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1632506892</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;request_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;req_7a9c48ef23b1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;documentation_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.atlas-bear.com/mara/docs/api/rate-limits&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="best-practices-for-handling-rate-limits" tabindex="-1">Best Practices for Handling Rate Limits <a class="header-anchor" href="#best-practices-for-handling-rate-limits" aria-label="Permalink to &quot;Best Practices for Handling Rate Limits&quot;">​</a></h3><ol><li><strong>Monitor the rate limit headers</strong> to track your usage</li><li><strong>Implement exponential backoff</strong> when receiving 429 responses: <ul><li>Start with a small delay (e.g., 1 second)</li><li>Double the delay on each retry</li><li>Add some randomness to prevent synchronized retries</li><li>Set a maximum retry limit</li></ul></li></ol><h3 id="sample-backoff-algorithm-python" tabindex="-1">Sample Backoff Algorithm (Python) <a class="header-anchor" href="#sample-backoff-algorithm-python" aria-label="Permalink to &quot;Sample Backoff Algorithm (Python)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_api_request_with_backoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, headers, max_retries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    retries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    base_delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Base delay in seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max_retries:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.get(url, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.status_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 429</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Not rate limited</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Extract reset time from headers or use exponential backoff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        reset_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.headers.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-RateLimit-Reset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        current_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reset_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_time:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Wait until the rate limit resets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reset_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.uniform(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Use exponential backoff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retries) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base_delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.uniform(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rate limited. Retrying in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:.2f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        time.sleep(delay)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        retries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Maximum retries reached due to rate limiting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="strategies-to-optimize-request-usage" tabindex="-1">Strategies to Optimize Request Usage <a class="header-anchor" href="#strategies-to-optimize-request-usage" aria-label="Permalink to &quot;Strategies to Optimize Request Usage&quot;">​</a></h2><ol><li><strong>Batch operations</strong> when possible instead of making many small requests</li><li><strong>Cache responses</strong> for data that doesn&#39;t change frequently</li><li><strong>Implement conditional requests</strong> using ETags and If-Modified-Since headers</li><li><strong>Distribute requests evenly</strong> over time rather than sending in bursts</li><li><strong>Prioritize critical requests</strong> over less important ones</li></ol><h2 id="monitoring-your-usage" tabindex="-1">Monitoring Your Usage <a class="header-anchor" href="#monitoring-your-usage" aria-label="Permalink to &quot;Monitoring Your Usage&quot;">​</a></h2><p>You can monitor your API usage through:</p><ol><li><strong>The Atlas Bear Portal dashboard</strong>, which provides real-time and historical usage metrics</li><li><strong>Rate limit headers</strong> in API responses</li><li><strong>Email notifications</strong> when you approach your daily limits (configurable in your account settings)</li></ol><h2 id="increasing-your-rate-limits" tabindex="-1">Increasing Your Rate Limits <a class="header-anchor" href="#increasing-your-rate-limits" aria-label="Permalink to &quot;Increasing Your Rate Limits&quot;">​</a></h2><p>If you regularly exceed your rate limits, consider:</p><ol><li><strong>Upgrading your subscription tier</strong> for higher limits</li><li><strong>Optimizing your API usage</strong> using the strategies mentioned above</li><li><strong>Contacting our support team</strong> for a custom enterprise plan if you have specific high-volume needs</li></ol><p>To upgrade your plan, visit the <a href="https://portal.atlas-bear.com" target="_blank" rel="noreferrer">Atlas Bear Portal</a> or contact our <a href="mailto:sales@atlas-bear.com" target="_blank" rel="noreferrer">sales team</a>.</p><h2 id="exemptions" tabindex="-1">Exemptions <a class="header-anchor" href="#exemptions" aria-label="Permalink to &quot;Exemptions&quot;">​</a></h2><p>Certain endpoints have different rate limits or are exempt from standard limits:</p><table tabindex="0"><thead><tr><th>Endpoint</th><th>Special Limit Condition</th></tr></thead><tbody><tr><td><code>/healthcheck</code></td><td>Not rate-limited</td></tr><tr><td><code>/authentication/verify</code></td><td>Limited to 300 requests per hour per API key</td></tr><tr><td>Webhook delivery</td><td>Not counted against your rate limits</td></tr></tbody></table><h2 id="testing-rate-limits" tabindex="-1">Testing Rate Limits <a class="header-anchor" href="#testing-rate-limits" aria-label="Permalink to &quot;Testing Rate Limits&quot;">​</a></h2><p>For testing how your application handles rate limits, you can use the test endpoint:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test/rate-limit</span></span></code></pre></div><p>This endpoint always returns a 429 response with standard rate limit headers, allowing you to test your backoff and retry logic.</p>`,33)]))}const E=i(n,[["render",l]]);export{g as __pageData,E as default};
