import{_ as s,c as e,o as a,ag as t}from"./chunks/framework.BONmpqY0.js";const g=JSON.parse('{"title":"Data Processing System","description":"","frontmatter":{},"headers":[],"relativePath":"data-pipeline/data-processing.md","filePath":"data-pipeline/data-processing.md"}'),n={name:"data-pipeline/data-processing.md"};function r(o,i,l,d,c,h){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="data-processing-system" tabindex="-1">Data Processing System <a class="header-anchor" href="#data-processing-system" aria-label="Permalink to &quot;Data Processing System&quot;">​</a></h1><p>The MARA data processing system transforms deduplicated raw incident data into structured, enriched incident records through intelligent analysis and standardization. This critical pipeline stage creates the high-quality incident data that powers MARA&#39;s reporting and analytics capabilities.</p><h2 id="processing-functions" tabindex="-1">Processing Functions <a class="header-anchor" href="#processing-functions" aria-label="Permalink to &quot;Processing Functions&quot;">​</a></h2><p>The data processing stage consists of two main functions that work in sequence:</p><ol><li><strong><code>process-raw-data-background.js</code></strong>: Processes individual raw data records into structured incident records</li><li><strong><code>process-incidents.js</code></strong>: Performs batch processing of incidents and additional post-processing tasks</li></ol><h2 id="processing-workflow" tabindex="-1">Processing Workflow <a class="header-anchor" href="#processing-workflow" aria-label="Permalink to &quot;Processing Workflow&quot;">​</a></h2><p>The complete data processing workflow consists of:</p><ol><li><strong>Raw Data Selection</strong>: Identify unprocessed records from the <code>raw_data</code> table</li><li><strong>Processing Status Update</strong>: Mark selected record as &quot;Processing&quot;</li><li><strong>Data Normalization</strong>: Standardize data formats and clean input</li><li><strong>AI-Powered Analysis</strong>: Generate enriched analysis using Claude AI</li><li><strong>Incident Creation</strong>: Create structured incident record</li><li><strong>Vessel Processing</strong>: Create or link to vessel records</li><li><strong>Related Data Creation</strong>: Create reference entries for incident attributes</li><li><strong>Processing Completion</strong>: Mark raw data as processed and link to created incident</li><li><strong>Continuation</strong>: Check for more records to process</li></ol><h2 id="detailed-process-flow" tabindex="-1">Detailed Process Flow <a class="header-anchor" href="#detailed-process-flow" aria-label="Permalink to &quot;Detailed Process Flow&quot;">​</a></h2><h3 id="raw-data-selection" tabindex="-1">Raw Data Selection <a class="header-anchor" href="#raw-data-selection" aria-label="Permalink to &quot;Raw Data Selection&quot;">​</a></h3><p>The <code>process-raw-data-background.js</code> function selects unprocessed records using this criteria:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filterByFormula</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;AND(NOT({has_incident}), OR(NOT({processing_status}), {processing_status} = &#39;pending&#39;))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>This ensures that:</p><ul><li>Only records without existing incidents are processed</li><li>Only records that aren&#39;t already being processed are selected</li></ul><h3 id="ai-powered-enrichment" tabindex="-1">AI-Powered Enrichment <a class="header-anchor" href="#ai-powered-enrichment" aria-label="Permalink to &quot;AI-Powered Enrichment&quot;">​</a></h3><p>A key feature of the processing system is the integration with Claude AI to enhance incident data:</p><ol><li><strong>Context Assembly</strong>: Builds a detailed prompt with incident information</li><li><strong>API Integration</strong>: Calls Claude with specialized instructions</li><li><strong>Description Enhancement</strong>: Standardizes and improves incident descriptions with maritime terminology</li><li><strong>Analysis Generation</strong>: Creates insightful analysis of the maritime incident</li><li><strong>Data Extraction</strong>: Extracts structured data about weapons, attackers, stolen items, etc.</li><li><strong>Title Generation</strong>: Creates a concise but descriptive incident title</li></ol><p>The system uses a carefully designed prompt that instructs Claude to:</p><ul><li>Create a concise incident title (max 10 words)</li><li>Extract location information if missing</li><li>Rephrase and standardize the incident description for clarity and consistency <ul><li>Apply proper nautical terminology (e.g., &quot;aboard&quot; instead of &quot;on&quot; a ship)</li><li>Standardize abbreviations (e.g., &quot;NM&quot; for nautical miles)</li><li>Use title case for vessel types (e.g., &quot;Bulk Carrier&quot;, &quot;Container Ship&quot;)</li><li>Properly introduce acronyms on first use (e.g., &quot;UK Maritime Trade Operations (UKMTO)&quot;)</li><li>Improve text formatting with appropriate paragraph breaks</li></ul></li><li>Identify weapons mentioned in the description</li><li>Provide insightful analysis (1-2 paragraphs)</li><li>Create actionable security recommendations (2-3 bullet points)</li><li>Extract specific details in structured format <ul><li>Weapons used</li><li>Number of attackers</li><li>Items stolen</li><li>Response type</li><li>Authorities notified</li></ul></li></ul><h3 id="standardization-through-reference-data" tabindex="-1">Standardization Through Reference Data <a class="header-anchor" href="#standardization-through-reference-data" aria-label="Permalink to &quot;Standardization Through Reference Data&quot;">​</a></h3><p>The system maintains standardized categorization through reference tables:</p><ol><li><strong>Incident Types</strong>: The system matches to known incident types or creates new ones</li><li><strong>Weapons</strong>: Standardized weapon categories for consistent reporting</li><li><strong>Items Stolen</strong>: Categorization of stolen property</li><li><strong>Response Types</strong>: Standard response classifications</li><li><strong>Authorities Notified</strong>: Standardized authority references</li></ol><p>For each reference category, the system:</p><ol><li>Checks if the item exists in the reference table</li><li>Creates it if it doesn&#39;t exist</li><li>Links the incident to the reference items</li></ol><h3 id="vessel-data-processing" tabindex="-1">Vessel Data Processing <a class="header-anchor" href="#vessel-data-processing" aria-label="Permalink to &quot;Vessel Data Processing&quot;">​</a></h3><p>The system handles vessel information with special care:</p><ol><li><strong>Vessel Lookup</strong>: Checks if vessel exists by name or IMO</li><li><strong>Vessel Creation</strong>: Creates new vessel record if needed</li><li><strong>Incident-Vessel Linking</strong>: Creates relationship in the <code>incident_vessel</code> join table</li><li><strong>Status Determination</strong>: Determines vessel status during incident: <ul><li>Parses status from raw data</li><li>Extracts from description if not explicit</li><li>Maps to standardized values (Anchored, Underway, Moored, etc.)</li></ul></li></ol><h3 id="processing-continuation" tabindex="-1">Processing Continuation <a class="header-anchor" href="#processing-continuation" aria-label="Permalink to &quot;Processing Continuation&quot;">​</a></h3><p>To handle large volumes efficiently, the system implements a self-triggering mechanism:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if more records exist to process</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moreRecords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkMoreRecordsExist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rawDataUrl, headers);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (moreRecords) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Trigger another processing run via API call</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> siteUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://mara-v2.netlify.app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">siteUrl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/.netlify/functions/process-raw-data-background\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (triggerError) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to trigger next processing job&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, triggerError.message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This allows continuous processing until all raw data has been processed.</p><h2 id="error-handling-and-resilience" tabindex="-1">Error Handling and Resilience <a class="header-anchor" href="#error-handling-and-resilience" aria-label="Permalink to &quot;Error Handling and Resilience&quot;">​</a></h2><p>The processing system implements robust error handling:</p><ol><li><strong>Transaction Isolation</strong>: Each record is processed independently</li><li><strong>State Tracking</strong>: Processing status is updated at each stage</li><li><strong>Detailed Logging</strong>: Comprehensive error information for troubleshooting</li><li><strong>Graceful Degradation</strong>: Falls back to simpler processing if advanced features fail</li><li><strong>Retry Mechanism</strong>: Failed records can be reprocessed</li></ol><h2 id="scheduling-and-execution" tabindex="-1">Scheduling and Execution <a class="header-anchor" href="#scheduling-and-execution" aria-label="Permalink to &quot;Scheduling and Execution&quot;">​</a></h2><p>The processing function is scheduled to run after collection and deduplication:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">functions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;process-incidents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25,55 * * * *&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 25 and 55 minutes past the hour</span></span></code></pre></div><p>Additionally, it&#39;s triggered on-demand after the deduplication function completes.</p><h2 id="system-extensions" tabindex="-1">System Extensions <a class="header-anchor" href="#system-extensions" aria-label="Permalink to &quot;System Extensions&quot;">​</a></h2><p>The processing system can be extended in several ways:</p><ol><li><strong>Additional AI Enrichment</strong>: Adding more advanced analysis capabilities</li><li><strong>Enhanced Categorization</strong>: Expanding reference data categories</li><li><strong>Custom Processing Rules</strong>: Adding source-specific or region-specific processing</li><li><strong>Improved Vessel Linking</strong>: Enhanced vessel identification and metadata extraction</li><li><strong>Post-Processing Analysis</strong>: Additional intelligence generation after incident creation</li></ol><h2 id="technical-considerations" tabindex="-1">Technical Considerations <a class="header-anchor" href="#technical-considerations" aria-label="Permalink to &quot;Technical Considerations&quot;">​</a></h2><h3 id="performance-optimization" tabindex="-1">Performance Optimization <a class="header-anchor" href="#performance-optimization" aria-label="Permalink to &quot;Performance Optimization&quot;">​</a></h3><p>The processing system optimizes performance through:</p><ol><li><strong>Batched API Calls</strong>: Reduces latency by combining related operations</li><li><strong>Incremental Processing</strong>: Processes records in small batches</li><li><strong>Cached Lookups</strong>: Minimizes redundant database queries</li><li><strong>Self-Throttling</strong>: Prevents resource exhaustion during peak loads</li></ol><h3 id="data-quality-assurance" tabindex="-1">Data Quality Assurance <a class="header-anchor" href="#data-quality-assurance" aria-label="Permalink to &quot;Data Quality Assurance&quot;">​</a></h3><p>Several mechanisms ensure data quality:</p><ol><li><strong>Validation</strong>: Input data is validated before processing</li><li><strong>Normalization</strong>: Dates, coordinates, and text are standardized</li><li><strong>AI Review</strong>: Claude provides a secondary check on data consistency</li><li><strong>Reference Standards</strong>: Use of reference tables ensures consistent categorization</li><li><strong>Field Verification</strong>: Required fields are verified before saving</li></ol><h2 id="monitoring-and-troubleshooting" tabindex="-1">Monitoring and Troubleshooting <a class="header-anchor" href="#monitoring-and-troubleshooting" aria-label="Permalink to &quot;Monitoring and Troubleshooting&quot;">​</a></h2><p>The processing system provides comprehensive monitoring:</p><ol><li><strong>Progress Logging</strong>: Detailed logs of each processing stage</li><li><strong>Status Tracking</strong>: Record status in the <code>raw_data</code> table</li><li><strong>Performance Metrics</strong>: Execution time and resource usage tracking</li><li><strong>Error Categorization</strong>: Specific error types for targeted fixing</li><li><strong>Debugging Tools</strong>: Special debugging endpoints for testing</li></ol>`,51)]))}const u=s(n,[["render",r]]);export{g as __pageData,u as default};
