import{_ as i,c as s,o as t,ag as a}from"./chunks/framework.BONmpqY0.js";const g=JSON.parse('{"title":"Data Pipeline Troubleshooting Guide","description":"","frontmatter":{},"headers":[],"relativePath":"data-pipeline/troubleshooting.md","filePath":"data-pipeline/troubleshooting.md"}'),n={name:"data-pipeline/troubleshooting.md"};function o(r,e,l,c,d,h){return t(),s("div",null,e[0]||(e[0]=[a('<h1 id="data-pipeline-troubleshooting-guide" tabindex="-1">Data Pipeline Troubleshooting Guide <a class="header-anchor" href="#data-pipeline-troubleshooting-guide" aria-label="Permalink to &quot;Data Pipeline Troubleshooting Guide&quot;">​</a></h1><p>This guide provides solutions for common issues encountered with the MARA data pipeline and instructions for monitoring and maintaining the system.</p><h2 id="common-issues-and-solutions" tabindex="-1">Common Issues and Solutions <a class="header-anchor" href="#common-issues-and-solutions" aria-label="Permalink to &quot;Common Issues and Solutions&quot;">​</a></h2><h3 id="collection-issues" tabindex="-1">Collection Issues <a class="header-anchor" href="#collection-issues" aria-label="Permalink to &quot;Collection Issues&quot;">​</a></h3><h4 id="no-data-being-collected-from-a-source" tabindex="-1">No Data Being Collected from a Source <a class="header-anchor" href="#no-data-being-collected-from-a-source" aria-label="Permalink to &quot;No Data Being Collected from a Source&quot;">​</a></h4><p>If a specific collection function is not gathering any data:</p><ol><li><strong>Check Source Availability</strong>: Verify that the source&#39;s API or website is operational</li><li><strong>Examine Function Logs</strong>: Look for connection errors or authentication issues</li><li><strong>Verify API Credentials</strong>: Ensure API keys are valid and properly set in environment variables</li><li><strong>Check Rate Limiting</strong>: Determine if the source has imposed rate limits</li><li><strong>Test Manual Collection</strong>: Attempt a manual trigger of the collection function</li></ol><h4 id="duplicate-raw-data-entries" tabindex="-1">Duplicate Raw Data Entries <a class="header-anchor" href="#duplicate-raw-data-entries" aria-label="Permalink to &quot;Duplicate Raw Data Entries&quot;">​</a></h4><p>If you notice duplicate entries in the <code>raw_data</code> table:</p><ol><li><strong>Check Source Reference IDs</strong>: Ensure the source is providing unique reference IDs</li><li><strong>Review Deduplication Logic</strong>: Verify the source-specific deduplication logic</li><li><strong>Examine Hash Generation</strong>: Ensure content hashing is correctly implemented</li><li><strong>Check for API Changes</strong>: Source API changes may affect how references are generated</li><li><strong>Clear Hash Cache</strong>: Use the <code>clear-all-hashes.js</code> function to reset hash caching</li></ol><h3 id="processing-issues" tabindex="-1">Processing Issues <a class="header-anchor" href="#processing-issues" aria-label="Permalink to &quot;Processing Issues&quot;">​</a></h3><h4 id="raw-data-not-being-processed" tabindex="-1">Raw Data Not Being Processed <a class="header-anchor" href="#raw-data-not-being-processed" aria-label="Permalink to &quot;Raw Data Not Being Processed&quot;">​</a></h4><p>If raw data is being collected but not processed into incidents:</p><ol><li><strong>Check Processing Status</strong>: Verify that records don&#39;t have the <code>processing_status</code> set to &quot;Processing&quot; (stuck records)</li><li><strong>Review Filter Formula</strong>: Ensure the selection formula in <code>process-raw-data-background.js</code> is working correctly</li><li><strong>Examine Function Logs</strong>: Look for errors during processing</li><li><strong>Verify Claude API Key</strong>: Ensure the Claude API key is valid for LLM enrichment</li><li><strong>Check Environment Variables</strong>: Verify all required environment variables are set</li></ol><h4 id="poor-quality-incident-analysis" tabindex="-1">Poor Quality Incident Analysis <a class="header-anchor" href="#poor-quality-incident-analysis" aria-label="Permalink to &quot;Poor Quality Incident Analysis&quot;">​</a></h4><p>If the AI-generated analysis is low quality:</p><ol><li><strong>Review Claude Prompts</strong>: Check and refine the prompts in <code>process-raw-data-background.js</code></li><li><strong>Examine Raw Data Quality</strong>: Poor input data can lead to poor analysis</li><li><strong>Verify Claude Model</strong>: Ensure the function is using the correct Claude model version</li><li><strong>Check Token Limits</strong>: Ensure prompts and responses are within token limits</li><li><strong>Sample Analysis</strong>: Review logs to see what Claude is generating</li></ol><h4 id="missing-vessel-information" tabindex="-1">Missing Vessel Information <a class="header-anchor" href="#missing-vessel-information" aria-label="Permalink to &quot;Missing Vessel Information&quot;">​</a></h4><p>If vessel data is not being properly linked to incidents:</p><ol><li><strong>Check Raw Data</strong>: Verify that source data includes vessel information</li><li><strong>Review Vessel Join Logic</strong>: Examine the vessel linking code</li><li><strong>Check Vessel Lookup</strong>: Ensure vessel lookup by name and IMO is working</li><li><strong>Examine Vessel Creation</strong>: Verify new vessels are being created properly</li><li><strong>Reconcile Vessel Names</strong>: Check for inconsistent vessel naming across sources</li></ol><h3 id="deduplication-issues" tabindex="-1">Deduplication Issues <a class="header-anchor" href="#deduplication-issues" aria-label="Permalink to &quot;Deduplication Issues&quot;">​</a></h3><h4 id="missed-duplicate-incidents" tabindex="-1">Missed Duplicate Incidents <a class="header-anchor" href="#missed-duplicate-incidents" aria-label="Permalink to &quot;Missed Duplicate Incidents&quot;">​</a></h4><p>If the system fails to identify duplicates:</p><ol><li><strong>Review Confidence Threshold</strong>: Adjust the similarity threshold in the deduplication function</li><li><strong>Check Time Window</strong>: Ensure the time window is appropriate (default: 48 hours)</li><li><strong>Examine Distance Calculation</strong>: Verify spatial proximity calculation</li><li><strong>Review Vessel Matching</strong>: Check vessel name and IMO matching logic</li><li><strong>Update Weights</strong>: Adjust the weights in the similarity score calculation</li></ol><h4 id="incorrect-merging" tabindex="-1">Incorrect Merging <a class="header-anchor" href="#incorrect-merging" aria-label="Permalink to &quot;Incorrect Merging&quot;">​</a></h4><p>If unrelated incidents are incorrectly merged:</p><ol><li><strong>Increase Confidence Threshold</strong>: Raise the threshold for required similarity</li><li><strong>Examine Similarity Components</strong>: Determine which factors are causing high similarity</li><li><strong>Add Additional Constraints</strong>: Implement additional rules for deduplication</li><li><strong>Use Dry Run Mode</strong>: Test changes with the dry run mode before applying</li></ol><p>For detailed deduplication troubleshooting, see the <a href="./../deduplication/troubleshooting.html">Deduplication Troubleshooting Guide</a>.</p><h2 id="monitoring-the-pipeline" tabindex="-1">Monitoring the Pipeline <a class="header-anchor" href="#monitoring-the-pipeline" aria-label="Permalink to &quot;Monitoring the Pipeline&quot;">​</a></h2><h3 id="key-logs-to-monitor" tabindex="-1">Key Logs to Monitor <a class="header-anchor" href="#key-logs-to-monitor" aria-label="Permalink to &quot;Key Logs to Monitor&quot;">​</a></h3><p>The MARA data pipeline produces several important log patterns to monitor:</p><ol><li><p><strong>Collection Success Indicators</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Successfully collected X incidents from SOURCE</span></span></code></pre></div></li><li><p><strong>Deduplication Activity</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Found X potential matches&quot;,&quot;highConfidence&quot;:Y,&quot;mediumConfidence&quot;:Z,&quot;analyzedPairs&quot;:W</span></span></code></pre></div></li><li><p><strong>Processing Progress</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Found record to process: {id: X, title: Y}</span></span></code></pre></div></li><li><p><strong>LLM Integration Status</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Successfully processed Claude response with generated title</span></span></code></pre></div></li></ol><h3 id="health-check-functions" tabindex="-1">Health Check Functions <a class="header-anchor" href="#health-check-functions" aria-label="Permalink to &quot;Health Check Functions&quot;">​</a></h3><p>Several utility functions can be used to check system health:</p><ol><li><strong><code>check-env.js</code></strong>: Verifies that required environment variables are set</li><li><strong><code>monitor-runs.js</code></strong>: Shows recent collection and processing runs</li><li><strong><code>check-cache.js</code></strong>: Verifies that caching is operational</li></ol><h3 id="manual-triggers" tabindex="-1">Manual Triggers <a class="header-anchor" href="#manual-triggers" aria-label="Permalink to &quot;Manual Triggers&quot;">​</a></h3><p>For manual testing or intervention, you can trigger pipeline stages directly:</p><ol><li><p><strong>Collection</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://your-netlify-site.netlify.app/.netlify/functions/collect-recaap&quot;</span></span></code></pre></div></li><li><p><strong>Deduplication</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://your-netlify-site.netlify.app/.netlify/functions/deduplicate-cross-source-background?dryRun=true&quot;</span></span></code></pre></div></li><li><p><strong>Processing</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://your-netlify-site.netlify.app/.netlify/functions/process-raw-data-background&quot;</span></span></code></pre></div></li></ol><h3 id="key-metrics-to-track" tabindex="-1">Key Metrics to Track <a class="header-anchor" href="#key-metrics-to-track" aria-label="Permalink to &quot;Key Metrics to Track&quot;">​</a></h3><p>Monitor these metrics to ensure pipeline health:</p><ol><li><strong>Collection Success Rate</strong>: Percentage of successful source collection runs</li><li><strong>Deduplication Accuracy</strong>: Number of correct merges vs. incorrect merges</li><li><strong>Processing Completion Time</strong>: Average time to process a raw data record</li><li><strong>LLM Enrichment Success</strong>: Percentage of records successfully enriched with AI</li><li><strong>Pipeline Throughput</strong>: Number of incidents processed per hour</li></ol><h2 id="performance-tuning" tabindex="-1">Performance Tuning <a class="header-anchor" href="#performance-tuning" aria-label="Permalink to &quot;Performance Tuning&quot;">​</a></h2><h3 id="collection-optimization" tabindex="-1">Collection Optimization <a class="header-anchor" href="#collection-optimization" aria-label="Permalink to &quot;Collection Optimization&quot;">​</a></h3><p>To optimize collection performance:</p><ol><li><strong>Adjust Collection Frequency</strong>: Modify the schedule in <code>netlify.toml</code> to match source update patterns</li><li><strong>Implement Incremental Collection</strong>: Only fetch new records since last successful run</li><li><strong>Optimize API Requests</strong>: Use filtering and field selection to reduce data transferred</li><li><strong>Implement Caching</strong>: Cache API responses where appropriate</li><li><strong>Use Batch Processing</strong>: Process records in batches rather than individually</li></ol><h3 id="processing-optimization" tabindex="-1">Processing Optimization <a class="header-anchor" href="#processing-optimization" aria-label="Permalink to &quot;Processing Optimization&quot;">​</a></h3><p>To optimize incident processing:</p><ol><li><strong>Adjust Batch Size</strong>: Modify the number of records processed in each function invocation</li><li><strong>Optimize LLM Prompts</strong>: Refine prompts to reduce token usage</li><li><strong>Implement Parallel Processing</strong>: Process multiple records simultaneously</li><li><strong>Cache Reference Data</strong>: Reduce database lookups for common reference items</li><li><strong>Optimize Database Queries</strong>: Minimize Airtable API calls with batched operations</li></ol><h2 id="recovery-procedures" tabindex="-1">Recovery Procedures <a class="header-anchor" href="#recovery-procedures" aria-label="Permalink to &quot;Recovery Procedures&quot;">​</a></h2><h3 id="handling-stuck-records" tabindex="-1">Handling Stuck Records <a class="header-anchor" href="#handling-stuck-records" aria-label="Permalink to &quot;Handling Stuck Records&quot;">​</a></h3><p>If records get stuck in &quot;Processing&quot; status:</p><ol><li><p>Run this Airtable formula to identify stuck records:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>AND({processing_status} = &#39;Processing&#39;, IS_BEFORE({last_processed}, DATEADD(NOW(), -1, &#39;hours&#39;)))</span></span></code></pre></div></li><li><p>Update stuck records to reset their status:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  processing_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pending&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  processing_notes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`Reset from stuck state at ${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toISOString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="recovering-from-failed-runs" tabindex="-1">Recovering from Failed Runs <a class="header-anchor" href="#recovering-from-failed-runs" aria-label="Permalink to &quot;Recovering from Failed Runs&quot;">​</a></h3><p>If a pipeline stage fails completely:</p><ol><li><strong>Check Environment Variables</strong>: Verify all required variables are set</li><li><strong>Review Function Logs</strong>: Identify the root cause of the failure</li><li><strong>Fix Underlying Issues</strong>: Address any API, permission, or code issues</li><li><strong>Reset Processing Status</strong>: Update any affected records</li><li><strong>Trigger Manual Run</strong>: Manually trigger the failed pipeline stage</li></ol><h3 id="data-correction" tabindex="-1">Data Correction <a class="header-anchor" href="#data-correction" aria-label="Permalink to &quot;Data Correction&quot;">​</a></h3><p>If incorrect data has been processed:</p><ol><li><strong>Identify Affected Records</strong>: Use Airtable views to isolate problematic records</li><li><strong>Correct Raw Data</strong>: Fix issues in the raw data if necessary</li><li><strong>Update Processing Status</strong>: Set processing_status to &quot;pending&quot; to reprocess</li><li><strong>Clear Cached Data</strong>: Clear any cached versions of the records</li><li><strong>Trigger Reprocessing</strong>: Manually trigger the processing function</li></ol>',58)]))}const u=i(n,[["render",o]]);export{g as __pageData,u as default};
