import{_ as a,c as s,o as n,ag as i}from"./chunks/framework.BONmpqY0.js";const u=JSON.parse('{"title":"Flash Report System Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"flash-report/architecture.md","filePath":"flash-report/architecture.md"}'),t={name:"flash-report/architecture.md"};function l(r,e,o,p,c,d){return n(),s("div",null,e[0]||(e[0]=[i(`<h1 id="flash-report-system-architecture" tabindex="-1">Flash Report System Architecture <a class="header-anchor" href="#flash-report-system-architecture" aria-label="Permalink to &quot;Flash Report System Architecture&quot;">​</a></h1><p>This document outlines the technical architecture of the Flash Report system, explaining how the components interact and the data flow process.</p><h2 id="system-components" tabindex="-1">System Components <a class="header-anchor" href="#system-components" aria-label="Permalink to &quot;System Components&quot;">​</a></h2><p>The Flash Report system consists of several key components:</p><ol><li><strong>Client-Side Application</strong>: Frontend interface that initiates flash report requests</li><li><strong>Serverless Functions</strong>: Netlify functions that handle the business logic and email delivery</li><li><strong>External Services</strong>: <ul><li><strong>SendGrid</strong>: Email delivery service</li><li><strong>Mapbox</strong>: Static map generation service</li><li><strong>Airtable</strong>: Incident and vessel data source</li></ul></li></ol><h2 id="architecture-diagram" tabindex="-1">Architecture Diagram <a class="header-anchor" href="#architecture-diagram" aria-label="Permalink to &quot;Architecture Diagram&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────┐     ┌──────────────────────┐     ┌─────────────┐</span></span>
<span class="line"><span>│                 │     │                      │     │             │</span></span>
<span class="line"><span>│  Client-Side    │────▶│ test-flash-report.js │────▶│             │</span></span>
<span class="line"><span>│  Application    │     │ Function             │     │             │</span></span>
<span class="line"><span>│                 │     │                      │     │             │</span></span>
<span class="line"><span>└─────────────────┘     └──────────────────────┘     │             │</span></span>
<span class="line"><span>                                 │                   │             │</span></span>
<span class="line"><span>                                 │                   │ send-flash- │     ┌─────────────┐</span></span>
<span class="line"><span>                                 └──────────────────▶│ report.js   │────▶│  SendGrid   │</span></span>
<span class="line"><span>┌─────────────────┐                                  │ Function    │     │  Email API  │</span></span>
<span class="line"><span>│                 │     ┌──────────────────────┐     │             │     └─────────────┘</span></span>
<span class="line"><span>│  Direct API     │────▶│ send-flash-report.js │────▶│             │</span></span>
<span class="line"><span>│  Integration    │     │ Function             │     │             │     ┌─────────────┐</span></span>
<span class="line"><span>│                 │     │                      │     │             │────▶│  Mapbox     │</span></span>
<span class="line"><span>└─────────────────┘     └──────────────────────┘     │             │     │  Static API │</span></span>
<span class="line"><span>                                                     └─────────────┘     └─────────────┘</span></span>
<span class="line"><span>                                                           │</span></span>
<span class="line"><span>                                                           │             ┌─────────────┐</span></span>
<span class="line"><span>                                                           │             │             │</span></span>
<span class="line"><span>                                                           └────────────▶│  Airtable   │</span></span>
<span class="line"><span>                                                                         │  API        │</span></span>
<span class="line"><span>                                                                         │             │</span></span>
<span class="line"><span>                                                                         └─────────────┘</span></span></code></pre></div><h2 id="data-flow" tabindex="-1">Data Flow <a class="header-anchor" href="#data-flow" aria-label="Permalink to &quot;Data Flow&quot;">​</a></h2><ol><li><p><strong>Request Initiation</strong>:</p><ul><li>A flash report request is initiated either through the client-side application or a direct API integration</li><li>For testing purposes, the request can go through the <code>test-flash-report.js</code> function</li></ul></li><li><p><strong>Data Retrieval</strong>:</p><ul><li>The <code>send-flash-report.js</code> function fetches incident data from Airtable</li><li>Vessel data is retrieved through multiple strategies: <ul><li>From direct vessel references in the incident record</li><li>From the incident-vessel join table</li><li>By looking up vessels by IMO number using <code>getVesselByIMO()</code></li><li>By looking up vessels by name using <code>getVesselByName()</code></li><li>By looking up vessels by ID using <code>getVesselById()</code></li><li>As a last resort, from embedded vessel fields in the incident record</li></ul></li><li>For testing or when Airtable is unavailable, sample data can be used</li></ul></li><li><p><strong>Map Generation</strong>:</p><ul><li>If coordinates are available, a static map is generated using the Mapbox API</li><li>The map shows the incident location with a marker colored according to incident type</li></ul></li><li><p><strong>Email Preparation</strong>:</p><ul><li>HTML email content is generated with incident details, vessel information, and embedded map</li><li>MARA branding is consistently applied to all emails for a unified brand experience</li><li>A secure token with 1-year validity is generated for each recipient</li><li>The layout displays quick facts grid before the location map for improved readability</li></ul></li><li><p><strong>Link Generation</strong>:</p><ul><li>Each email contains a link to view the report online</li><li>Link branding (client or default) is determined based on recipient&#39;s email domain</li><li>Public URLs are created with the generated tokens</li></ul></li><li><p><strong>Email Delivery</strong>:</p><ul><li>Emails are sent to all recipients using the SendGrid API</li><li>Results are tracked for each recipient</li></ul></li><li><p><strong>Response</strong>:</p><ul><li>The function returns a response with success/failure status for each recipient</li><li>In development environments without SendGrid API keys, email content is returned for inspection</li></ul></li></ol><h2 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">​</a></h2><ol><li><p><strong>API Keys</strong>:</p><ul><li>All API keys (SendGrid, Mapbox) are stored as environment variables</li><li>Keys are never exposed to the client-side application</li></ul></li><li><p><strong>CORS Protection</strong>:</p><ul><li>API endpoints are protected with proper CORS headers</li><li>Only authorized origins can access the endpoints</li></ul></li><li><p><strong>Data Validation</strong>:</p><ul><li>All input data is validated before processing</li><li>Required fields are checked to prevent incomplete data processing</li></ul></li></ol><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><p>The system includes robust error handling at various levels:</p><ol><li><strong>Input Validation Errors</strong>: Return 400 Bad Request with specific validation messages</li><li><strong>Incident Not Found</strong>: Return 404 Not Found with the incident ID that wasn&#39;t found</li><li><strong>External API Errors</strong>: <ul><li>Airtable connectivity issues trigger fallback to sample data</li><li>SendGrid errors are caught and reported per recipient</li><li>Mapbox errors result in fallback to placeholder images</li></ul></li><li><strong>System Errors</strong>: Return 500 Internal Server Error with error details</li></ol><h2 id="scalability" tabindex="-1">Scalability <a class="header-anchor" href="#scalability" aria-label="Permalink to &quot;Scalability&quot;">​</a></h2><p>The Flash Report system is designed to scale efficiently:</p><ol><li><strong>Serverless Architecture</strong>: Functions scale automatically based on demand</li><li><strong>Parallel Processing</strong>: Multiple recipient emails are processed concurrently</li><li><strong>Stateless Design</strong>: Each function invocation is independent, allowing horizontal scaling</li><li><strong>Minimal Payloads</strong>: Only necessary data is passed between functions and services</li></ol>`,17)]))}const g=a(t,[["render",l]]);export{u as __pageData,g as default};
