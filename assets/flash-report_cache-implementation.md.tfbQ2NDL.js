import{_ as s,c as a,o as n,ag as t}from"./chunks/framework.BONmpqY0.js";const c=JSON.parse('{"title":"Incident Caching Implementation","description":"","frontmatter":{},"headers":[],"relativePath":"flash-report/cache-implementation.md","filePath":"flash-report/cache-implementation.md"}'),e={name:"flash-report/cache-implementation.md"};function l(h,i,p,r,o,d){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="incident-caching-implementation" tabindex="-1">Incident Caching Implementation <a class="header-anchor" href="#incident-caching-implementation" aria-label="Permalink to &quot;Incident Caching Implementation&quot;">​</a></h1><p>This document explains the new incident caching system implemented for the flash report functionality and how to adopt it for other parts of the application.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>We&#39;ve implemented a caching layer for incident data using Netlify Blobs. This provides several benefits:</p><ol><li><strong>Improved Performance</strong>: Reduces API calls to Airtable</li><li><strong>Consistent Data Format</strong>: Standardizes data between client-side and server-side</li><li><strong>Reduced Rate Limiting</strong>: Helps avoid hitting Airtable&#39;s API rate limits</li><li><strong>Data Enrichment</strong>: Automatically enhances incident data with related information</li></ol><h2 id="implementation-details" tabindex="-1">Implementation Details <a class="header-anchor" href="#implementation-details" aria-label="Permalink to &quot;Implementation Details&quot;">​</a></h2><h3 id="key-components" tabindex="-1">Key Components <a class="header-anchor" href="#key-components" aria-label="Permalink to &quot;Key Components&quot;">​</a></h3><ol><li><p><strong><code>/functions/utils/incident-cache.js</code></strong>:</p><ul><li>Core caching functionality</li><li>Standardizes data structure</li><li>Handles cache invalidation</li></ul></li><li><p><strong><code>/functions/get-cached-incident.js</code></strong>:</p><ul><li>New endpoint for retrieving cached incident data</li><li>Works in parallel with existing <code>get-incident.js</code></li><li>Returns both flat and nested data formats</li></ul></li><li><p><strong>Updated Flash Reports</strong>:</p><ul><li><code>send-flash-report.js</code> now uses the cached incident data</li><li>Maintains backward compatibility with existing code</li></ul></li></ol><h3 id="data-format" tabindex="-1">Data Format <a class="header-anchor" href="#data-format" aria-label="Permalink to &quot;Data Format&quot;">​</a></h3><p>The cache stores incident data in two formats:</p><ol><li><p><strong>Flat structure</strong> (client-friendly):</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2023-0123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Robbery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Armed Robbery Aboard Vessel X&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vesselName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vessel X&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vesselType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Container Ship&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Underway&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... other flat fields</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Nested structure</strong> (matches Airtable&#39;s structure for backward compatibility):</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    incident</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* incident fields */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    vessel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* vessel fields */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    incidentVessel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* relationship fields */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    incidentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* incident type fields */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="how-to-use-the-cache" tabindex="-1">How to Use the Cache <a class="header-anchor" href="#how-to-use-the-cache" aria-label="Permalink to &quot;How to Use the Cache&quot;">​</a></h2><h3 id="in-netlify-functions" tabindex="-1">In Netlify Functions <a class="header-anchor" href="#in-netlify-functions" aria-label="Permalink to &quot;In Netlify Functions&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getCachedIncident } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils/incident-cache.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get cached incident data (returns from cache or fetches if not in cache)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> incidentData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCachedIncident</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(incidentId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Force a refresh from the source</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> freshData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCachedIncident</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(incidentId, { forceRefresh: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Invalidate cache for an incident (e.g., after an update)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invalidateIncidentCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(incidentId);</span></span></code></pre></div><h3 id="from-client-components" tabindex="-1">From Client Components <a class="header-anchor" href="#from-client-components" aria-label="Permalink to &quot;From Client Components&quot;">​</a></h3><p>Use the new endpoint:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// React component example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchCachedIncident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/.netlify/functions/get-cached-incident?id=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="gradual-adoption-strategy" tabindex="-1">Gradual Adoption Strategy <a class="header-anchor" href="#gradual-adoption-strategy" aria-label="Permalink to &quot;Gradual Adoption Strategy&quot;">​</a></h2><p>We&#39;re taking a gradual approach to adoption:</p><ol><li><p><strong>Phase 1</strong> (Current):</p><ul><li>Implement caching for flash reports</li><li>Create new endpoint in parallel with existing one</li></ul></li><li><p><strong>Phase 2</strong>:</p><ul><li>Update client components to use cached data</li><li>Modify useIncident.js hook to use get-cached-incident endpoint</li></ul></li><li><p><strong>Phase 3</strong>:</p><ul><li>Deprecate old get-incident.js function</li><li>Fully transition to cached data across the application</li></ul></li></ol><h2 id="cache-invalidation" tabindex="-1">Cache Invalidation <a class="header-anchor" href="#cache-invalidation" aria-label="Permalink to &quot;Cache Invalidation&quot;">​</a></h2><p>The cache is automatically invalidated when:</p><ul><li>The TTL (Time To Live) expires (default: 24 hours)</li><li>Explicitly invalidated via the <code>invalidateIncidentCache</code> function</li></ul><p>To implement webhook-based invalidation for real-time updates:</p><ol><li>Create a webhook handler function</li><li>Use Airtable&#39;s webhook feature to notify when records change</li><li>Call <code>invalidateIncidentCache</code> when receiving a webhook</li></ol><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>To test the cache implementation:</p><ol><li>Use the flash report email functionality with real incident IDs</li><li>Check Netlify logs for &quot;Cache hit/miss&quot; messages</li><li>Verify vessel data appears correctly in the emails</li></ol><h2 id="performance-monitoring" tabindex="-1">Performance Monitoring <a class="header-anchor" href="#performance-monitoring" aria-label="Permalink to &quot;Performance Monitoring&quot;">​</a></h2><p>The cache logs detailed information about cache hits, misses, and data updates. You can monitor these in the Netlify function logs to track performance improvements.</p>`,30)]))}const g=s(e,[["render",l]]);export{c as __pageData,g as default};
