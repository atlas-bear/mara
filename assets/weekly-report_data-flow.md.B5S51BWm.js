import{_ as t,c as a,o as i,ag as n}from"./chunks/framework.BONmpqY0.js";const u=JSON.parse('{"title":"Weekly Report Data Flow","description":"","frontmatter":{},"headers":[],"relativePath":"weekly-report/data-flow.md","filePath":"weekly-report/data-flow.md"}'),r={name:"weekly-report/data-flow.md"};function o(l,e,s,c,d,h){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="weekly-report-data-flow" tabindex="-1">Weekly Report Data Flow <a class="header-anchor" href="#weekly-report-data-flow" aria-label="Permalink to &quot;Weekly Report Data Flow&quot;">​</a></h1><p>This document explains the flow of data through the Weekly Report system, from data retrieval to display.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The Weekly Report uses a tiered architecture for data flow:</p><ol><li><strong>Client-Side:</strong> The browser-based UI that displays the report</li><li><strong>Serverless Functions:</strong> Intermediate API layer that performs data processing</li><li><strong>Data Sources:</strong> Backend systems where incident data is stored</li></ol><h2 id="data-flow-diagram" tabindex="-1">Data Flow Diagram <a class="header-anchor" href="#data-flow-diagram" aria-label="Permalink to &quot;Data Flow Diagram&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌───────────────┐     ┌──────────────────┐     ┌─────────────┐</span></span>
<span class="line"><span>│ Client Browser │────▶│ Serverless       │────▶│ Data Sources│</span></span>
<span class="line"><span>│               │◀────│ Functions         │◀────│             │</span></span>
<span class="line"><span>└───────────────┘     └──────────────────┘     └─────────────┘</span></span></code></pre></div><h2 id="detailed-flow" tabindex="-1">Detailed Flow <a class="header-anchor" href="#detailed-flow" aria-label="Permalink to &quot;Detailed Flow&quot;">​</a></h2><h3 id="_1-client-initialization" tabindex="-1">1. Client Initialization <a class="header-anchor" href="#_1-client-initialization" aria-label="Permalink to &quot;1. Client Initialization&quot;">​</a></h3><p>When a user visits a Weekly Report page:</p><ol><li>The client application loads the <code>WeeklyReportPage</code> component</li><li>The URL is parsed to extract the year and week number (<code>/weekly-report/2025-12</code>)</li><li>The <code>getReportingWeek(year, week)</code> function calculates the date range</li><li>The component initializes with empty state</li></ol><h3 id="_2-incident-data-retrieval" tabindex="-1">2. Incident Data Retrieval <a class="header-anchor" href="#_2-incident-data-retrieval" aria-label="Permalink to &quot;2. Incident Data Retrieval&quot;">​</a></h3><p>To populate the report with incident data:</p><ol><li>The client calls <code>fetchWeeklyIncidents(start, end)</code></li><li>This function makes an API request to the <code>get-weekly-incidents</code> serverless function</li><li>The serverless function queries the data source for incidents within the date range</li><li>The incident data is returned to the client</li><li>The client organizes incidents by region and updates the state</li></ol><h3 id="_3-ai-content-generation" tabindex="-1">3. AI Content Generation <a class="header-anchor" href="#_3-ai-content-generation" aria-label="Permalink to &quot;3. AI Content Generation&quot;">​</a></h3><p>For the Key Developments and 7-Day Forecast sections:</p><ol><li>The client calls <code>fetchWeeklyReportContent(start, end)</code></li><li>This triggers an API request to the <code>get-weekly-report-content</code> serverless function</li><li>The serverless function first checks for cached content</li><li>If cached content exists, it&#39;s returned immediately</li><li>If no cache exists, the function: <ul><li>Fetches incident data from the same data source</li><li>Retrieves historical trend data</li><li>Prepares data for AI analysis</li><li>Calls the AI service to generate insights</li><li>Caches the result for future requests</li><li>Returns the content to the client</li></ul></li><li>The client updates the ExecutiveBrief with the AI-generated content</li></ol><h3 id="_4-background-generation" tabindex="-1">4. Background Generation <a class="header-anchor" href="#_4-background-generation" aria-label="Permalink to &quot;4. Background Generation&quot;">​</a></h3><p>To optimize performance, a background process runs weekly:</p><ol><li>The <code>get-weekly-report-content-background</code> function runs every Monday at 21:00 UTC</li><li>It calculates the reporting period that just ended</li><li>It generates content for that period using the same logic as the on-demand function</li><li>The content is stored in a cache with a 7-day TTL</li><li>Subsequent client requests can use this cached content</li></ol><h2 id="caching-strategy" tabindex="-1">Caching Strategy <a class="header-anchor" href="#caching-strategy" aria-label="Permalink to &quot;Caching Strategy&quot;">​</a></h2><p>The Weekly Report implements a tiered caching strategy:</p><ol><li><p><strong>Server-Side Cache (7 days):</strong></p><ul><li>Primary cache using Netlify Blob Storage</li><li>Stores AI-generated content for completed reporting periods</li><li>TTL of 7 days to cover the next weekly cycle</li><li>Reduces AI service usage and improves performance</li></ul></li><li><p><strong>Client-Side Cache (24 hours):</strong></p><ul><li>Browser caching through Cache-Control headers</li><li>Keeps report content available for the same user across sessions</li><li>Reduces API calls for the same report</li></ul></li></ol><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><p>The data flow includes robust error handling:</p><ol><li><strong>Cache Misses:</strong> If cached content is not available, the system falls back to generating new content</li><li><strong>API Failures:</strong> Client components handle API errors and show appropriate error messages</li><li><strong>Missing Data:</strong> Default values and fallback content are provided when expected data is unavailable</li></ol><h2 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">​</a></h2><p>The data flow is designed with security in mind:</p><ol><li><strong>API Key Protection:</strong> Server-side functions handle API keys, which are never exposed to the client</li><li><strong>Environment Variables:</strong> Sensitive configuration is stored in environment variables</li><li><strong>CORS Headers:</strong> API endpoints include appropriate CORS headers for security</li><li><strong>Data Validation:</strong> Input validation is performed at each step of the flow</li></ol>`,29)]))}const g=t(r,[["render",o]]);export{u as __pageData,g as default};
