-- Migration Script for CSER Schema - MARA Project
-- Version: 1.1 (Hybrid Incident ID)
-- Date: 2025-04-08

-- Start transaction
BEGIN;

-- 1. Create Schema
CREATE SCHEMA IF NOT EXISTS cser;
COMMENT ON SCHEMA cser IS 'Schema for the Comprehensive Security Event Repository (CSER) pillar.';

-- 2. Define ENUM Types
CREATE TYPE cser.vessel_role_enum AS ENUM (
    'Victim', 'Aggressor', 'Witness', 'Support', 'Target', 'Suspect', 'Response'
);
CREATE TYPE cser.vessel_status_enum AS ENUM (
    'Underway', 'Anchored', 'Moored', 'Berthed', 'Under Tow', 'Not Under Command', 'Other', 'Operating'
);
CREATE TYPE cser.processing_status_enum AS ENUM (
    'Pending', 'Processing', 'Complete', 'Error'
);
CREATE TYPE cser.merge_status_enum AS ENUM (
    'merged', 'merged_into'
);

-- 3. Create Main Tables (Lookup tables first, then tables with FKs)

CREATE TABLE cser.incident_type (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE,
    description text
);
COMMENT ON TABLE cser.incident_type IS 'Lookup table for incident types (CSER pillar).';

CREATE TABLE cser.weapon (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE
);
COMMENT ON TABLE cser.weapon IS 'Lookup table for weapons used (CSER pillar).';

CREATE TABLE cser.item_stolen (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE
);
COMMENT ON TABLE cser.item_stolen IS 'Lookup table for items stolen (CSER pillar).';

CREATE TABLE cser.response_type (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE
);
COMMENT ON TABLE cser.response_type IS 'Lookup table for response types (CSER pillar).';

CREATE TABLE cser.authority (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE
);
COMMENT ON TABLE cser.authority IS 'Lookup table for authorities notified (CSER pillar).';

CREATE TABLE cser.vessel (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    imo text UNIQUE,
    type text,
    flag text,
    beam numeric,
    length numeric,
    draft numeric,
    date_added timestamptz DEFAULT now() NOT NULL
);
COMMENT ON TABLE cser.vessel IS 'Stores vessel information (CSER pillar).';
COMMENT ON COLUMN cser.vessel.name IS 'Required. Handle missing source data with default.';
COMMENT ON COLUMN cser.vessel.imo IS 'Unique IMO number if provided.';

CREATE TABLE cser.incident (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(), -- Internal UUID Primary Key
    reference_id text UNIQUE NOT NULL,             -- Public facing ID (YYYYMMDD-HHMM-LOC), generated by trigger
    date_time_utc timestamptz NOT NULL,
    latitude float8 NOT NULL,
    longitude float8 NOT NULL,
    location_name text NOT NULL,
    title text,
    description text,
    analysis text,
    recommendations text,
    status text NOT NULL,
    number_of_attackers integer,
    region text NOT NULL,
    map_image_url text,
    map_image jsonb,
    last_flash_alert_sent_at timestamptz,
    date_added timestamptz DEFAULT now() NOT NULL,
    modified_at timestamptz DEFAULT now() NOT NULL -- Updated by trigger
);
COMMENT ON TABLE cser.incident IS 'Stores core incident details (CSER pillar).';
COMMENT ON COLUMN cser.incident.id IS 'Internal UUID primary key.';
COMMENT ON COLUMN cser.incident.reference_id IS 'Unique, public-facing reference ID (e.g., YYYYMMDD-HHMM-LOC). Generated by trigger.';
COMMENT ON COLUMN cser.incident.location_name IS 'Required. Migration script handles old NULLs.';
COMMENT ON COLUMN cser.incident.modified_at IS 'Auto-updated by trigger.';

CREATE TABLE cser.raw_data (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    title text,
    description text,
    update_text text,
    date timestamptz,
    reference text,
    region text,
    incident_type_name text,
    aggressor text,
    source text,
    latitude float8,
    longitude float8,
    location text,
    raw_json jsonb,
    original_source text,
    vessel_name text,
    vessel_type text,
    vessel_flag text,
    vessel_imo text,
    vessel_status text,
    has_incident boolean DEFAULT false,
    processing_status cser.processing_status_enum,
    processing_notes text,
    last_processed timestamptz,
    processing_attempts integer DEFAULT 0,
    merge_status cser.merge_status_enum,
    merged_into_raw_data_id uuid,
    merge_score text,
    created_at timestamptz DEFAULT now() NOT NULL,
    modified_at timestamptz DEFAULT now() NOT NULL -- Updated by trigger
);
COMMENT ON TABLE cser.raw_data IS 'Stores raw data entries (CSER pillar).';
COMMENT ON COLUMN cser.raw_data.merge_status IS 'Deduplication status (merged, merged_into). NULL means not currently merged.';
COMMENT ON COLUMN cser.raw_data.merged_into_raw_data_id IS 'If status is ''merged'', points to the primary record ID.';
COMMENT ON COLUMN cser.raw_data.modified_at IS 'Auto-updated by trigger.';


-- 4. Create Junction Tables (Updated incident_id type to uuid)

CREATE TABLE cser.incident_vessel (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    vessel_id uuid NOT NULL REFERENCES cser.vessel(id) ON DELETE CASCADE,
    vessel_role cser.vessel_role_enum,
    vessel_status_during_incident cser.vessel_status_enum,
    notes text,
    damage_sustained text,
    crew_impact text,
    date_added timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT unique_incident_vessel UNIQUE (incident_id, vessel_id)
);
COMMENT ON TABLE cser.incident_vessel IS 'Links incidents to involved vessels (CSER pillar).';

CREATE TABLE cser.incident_incident_type_link (
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    incident_type_id uuid NOT NULL REFERENCES cser.incident_type(id) ON DELETE CASCADE,
    PRIMARY KEY (incident_id, incident_type_id)
);
COMMENT ON TABLE cser.incident_incident_type_link IS 'Links incidents to incident types (M2M) (CSER pillar).';

CREATE TABLE cser.incident_weapon_link (
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    weapon_id uuid NOT NULL REFERENCES cser.weapon(id) ON DELETE CASCADE,
    PRIMARY KEY (incident_id, weapon_id)
);
COMMENT ON TABLE cser.incident_weapon_link IS 'Links incidents to weapons used (M2M) (CSER pillar).';

CREATE TABLE cser.incident_item_stolen_link (
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    item_stolen_id uuid NOT NULL REFERENCES cser.item_stolen(id) ON DELETE CASCADE,
    PRIMARY KEY (incident_id, item_stolen_id)
);
COMMENT ON TABLE cser.incident_item_stolen_link IS 'Links incidents to items stolen (M2M) (CSER pillar).';

CREATE TABLE cser.incident_response_type_link (
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    response_type_id uuid NOT NULL REFERENCES cser.response_type(id) ON DELETE CASCADE,
    PRIMARY KEY (incident_id, response_type_id)
);
COMMENT ON TABLE cser.incident_response_type_link IS 'Links incidents to response types (M2M) (CSER pillar).';

CREATE TABLE cser.incident_authority_link (
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    authority_id uuid NOT NULL REFERENCES cser.authority(id) ON DELETE CASCADE,
    PRIMARY KEY (incident_id, authority_id)
);
COMMENT ON TABLE cser.incident_authority_link IS 'Links incidents to authorities notified (M2M) (CSER pillar).';

CREATE TABLE cser.incident_raw_data_link (
    incident_id uuid NOT NULL REFERENCES cser.incident(id) ON DELETE CASCADE, -- Changed to uuid
    raw_data_id uuid NOT NULL REFERENCES cser.raw_data(id) ON DELETE CASCADE,
    PRIMARY KEY (incident_id, raw_data_id)
);
COMMENT ON TABLE cser.incident_raw_data_link IS 'Links incidents to source raw data entries (M2M) (CSER pillar).';

-- Optional FK for raw_data self-reference
ALTER TABLE cser.raw_data
    ADD CONSTRAINT fk_merged_into FOREIGN KEY(merged_into_raw_data_id) REFERENCES cser.raw_data(id) ON DELETE SET NULL;


-- 5. Define Trigger Functions

-- Generic function to update a 'modified_at' column
CREATE OR REPLACE FUNCTION public.update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.modified_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';
COMMENT ON FUNCTION public.update_modified_column() IS 'Updates the modified_at timestamp on row modification.';

-- Function to generate custom incident reference ID
CREATE OR REPLACE FUNCTION cser.generate_incident_reference_id() -- Renamed function slightly
RETURNS TRIGGER AS $$
DECLARE
    loc_abbr text;
BEGIN
   -- Extract first 3 alphanumeric chars from location_name, uppercase. Handle NULL/empty.
   loc_abbr := UPPER(LEFT(regexp_replace(COALESCE(NEW.location_name, 'UNK'), '[^A-Za-z0-9]', '', 'g'), 3));
   IF length(loc_abbr) = 0 THEN
       loc_abbr := 'UNK'; -- Fallback if location is purely non-alphanumeric or empty after regex
   END IF;

   -- Format date and time (UTC) and set the reference_id
   NEW.reference_id := to_char(NEW.date_time_utc AT TIME ZONE 'UTC', 'YYYYMMDD') || '-' || to_char(NEW.date_time_utc AT TIME ZONE 'UTC', 'HH24MI') || '-' || loc_abbr;
   RETURN NEW;
END;
$$ language 'plpgsql';
COMMENT ON FUNCTION cser.generate_incident_reference_id() IS 'Generates the custom incident reference ID (YYYYMMDD-HHMM-LOC) before insert.';


-- 6. Create Triggers

-- Trigger for incident.modified_at
CREATE TRIGGER update_incident_modtime
BEFORE UPDATE ON cser.incident
FOR EACH ROW
EXECUTE FUNCTION public.update_modified_column();

-- Trigger for raw_data.modified_at
CREATE TRIGGER update_raw_data_modtime
BEFORE UPDATE ON cser.raw_data
FOR EACH ROW
EXECUTE FUNCTION public.update_modified_column();

-- Trigger for incident.reference_id generation
CREATE TRIGGER set_incident_reference_id -- Renamed trigger slightly
BEFORE INSERT ON cser.incident
FOR EACH ROW
EXECUTE FUNCTION cser.generate_incident_reference_id();

-- NOTE: Consider adding BEFORE UPDATE trigger for incident.reference_id if date_time_utc or location_name can change
--       and you want the reference_id to update accordingly.


-- Commit transaction
COMMIT;
